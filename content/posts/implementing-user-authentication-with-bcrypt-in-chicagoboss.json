{"file":"posts/2013-10-03-implementing-user-authentication-with-bcrypt-in-chicagoboss.md","type":"posts","slug":"posts/implementing-user-authentication-with-bcrypt-in-chicagoboss","date":"2013-10-03T00:00:00.000Z","title":"Implementing User Authentication with bcrypt in ChicagoBoss","author":"shane","layout":"post","categories":["All Posts","Programming"],"tags":["authentication","bcrypt","chicagoboss","erlang","functional programming"],"alias":["/implementing-user-authentication-with-bcrypt-in-chicagoboss/","/erlang/implementing-user-authentication-with-bcrypt-in-chicagoboss/"],"description":"Don't rely on MD5/SHA1/SHA256/etc. hashes for storing passwords. Join me in learning how to bcrypt in Erlang applications.","content":"<p>Ever since I learned the error in using basic <code>MD5</code>/<code>SHA1</code>/<code>SHA256</code>/etc. hashes for storing password hashes, I always see to adding in <code>bcrypt</code> hashing in the authentication for my web applications, but <a href=\"http://www.chicagoboss.org/\">ChicagoBoss</a>, one of my new go-to web frameworks along with <a href=\"http://robfig.github.io/revel/\">Revel</a> (yay, concurrency!), doesn&#39;t have <code>bcrypt</code> support added in by default. Let&#39;s go ahead and add that ourselves.</p>\n<!--more-->\n<p>Before we get into things, I just want you to be aware that this is a very basic implementation. There are many things I plan on changing (I may end up updating the <a href=\"https://gist.github.com/slogsdon/7226067\">gist</a> as well), so please follow suit. Use this as a starting point, and adapt this to the needs of your project.</p>\n<h2 id=\"initial-configuration\">Initial Configuration</h2>\n<p>Let&#39;s add <code>bcrypt</code> to our <code>rebar.config</code> as a dependency:</p>\n<pre><code class=\"hljs language-erlang\">{deps, [\n    {boss, <span class=\"hljs-string\">\".*\"</span>, {git, <span class=\"hljs-string\">\"git://github.com/evanmiller/ChicagoBoss.git\"</span>, <span class=\"hljs-string\">\"HEAD\"</span>}},\n    {bcrypt, <span class=\"hljs-string\">\".*\"</span>, {git, <span class=\"hljs-string\">\"https://github.com/opscode/erlang-bcrypt.git\"</span>, <span class=\"hljs-string\">\"HEAD\"</span>}}\n]}.\n{plugin_dir, [<span class=\"hljs-string\">\"priv/rebar\"</span>]}.\n{plugins, [boss_plugin]}.\n{eunit_compile_opts, [{src_dirs, [<span class=\"hljs-string\">\"src/test\"</span>]}]}.\n{lib_dirs, [<span class=\"hljs-string\">\"./deps/elixir/lib\"</span>]}.\n</code></pre>\n<p>More than likely, you&#39;ll already have most of this except for line 3. To grab the source and compile <code>bcrypt</code>, run <code>./rebar get-deps compile</code>.</p>\n<p>Don&#39;t forget to configure a persistent data store for your user accounts in <code>boss.config</code>. This should work with the default <code>mock</code> <code>db_adapter</code>, but you will lose all data once you stop/restart the application.</p>\n<h2 id=\"loading-bcrypt-\">Loading <code>bcrypt</code></h2>\n<p>We need <code>bcrypt</code>&#39;s application to be running before we can use it. Sadly, I have yet to figure out the magic sauce to have ChicagoBoss run <code>bcrypt</code> automatically, so in the mean time, we&#39;ll use an init script to help us out:</p>\n<pre><code class=\"hljs language-erlang\"><span class=\"hljs-comment\">%% file: priv/init/module_10_bcrypt.erl</span>\n<span class=\"hljs-keyword\">-module</span><span class=\"hljs-params\">(module_10_bcrypt)</span>.\n<span class=\"hljs-keyword\">-export</span><span class=\"hljs-params\">([init/<span class=\"hljs-number\">0</span>, stop/<span class=\"hljs-number\">0</span>])</span>.\n\n<span class=\"hljs-comment\">%% We need to manually start the bcrypt application.</span>\n<span class=\"hljs-comment\">%% @<span class=\"hljs-doctag\">TODO:</span> figure out how to get this to run via boss.config.</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">init</span><span class=\"hljs-params\">()</span> -&gt;</span>\n    <span class=\"hljs-comment\">%% Uncomment the following line if your CB app doesn't start crypto on its own</span>\n    <span class=\"hljs-comment\">% crypto:start(),</span>\n    bcrypt:start().\n\n<span class=\"hljs-function\"><span class=\"hljs-title\">stop</span><span class=\"hljs-params\">()</span> -&gt;</span>\n    bcrypt:stop().\n    <span class=\"hljs-comment\">%% Comment the above and uncomment the following lines</span>\n    <span class=\"hljs-comment\">%% if your CB app doesn't start crypto on its own</span>\n    <span class=\"hljs-comment\">% bcrypt:stop(),</span>\n    <span class=\"hljs-comment\">% crypto:stop().</span>\n</code></pre>\n<p>All modules with an exported <code>init/0</code> in <code>./priv/init</code> are loaded and called at initial application start. This is helpful for adding watches with <code>boss_news</code> as well.</p>\n<h2 id=\"our-user-model\">Our User Model</h2>\n<p>Here&#39;s a basic user model for our account information with a few convenience functions sprinkled in:</p>\n<pre><code class=\"hljs language-erlang\"><span class=\"hljs-comment\">%% file: src/model/test_user.erl</span>\n<span class=\"hljs-keyword\">-module</span><span class=\"hljs-params\">(test_user, [Id, Email, Username, Password])</span>.\n<span class=\"hljs-keyword\">-compile</span><span class=\"hljs-params\">(export_all)</span>.\n\n<span class=\"hljs-keyword\">-define</span><span class=\"hljs-params\">(SETEC_ASTRONOMY, <span class=\"hljs-string\">\"Too many secrets\"</span>)</span>.\n\n<span class=\"hljs-function\"><span class=\"hljs-title\">session_identifier</span><span class=\"hljs-params\">()</span> -&gt;</span>\n    mochihex:to_hex(erlang:md5(?SETEC_ASTRONOMY ++ Id)).\n\n<span class=\"hljs-function\"><span class=\"hljs-title\">check_password</span><span class=\"hljs-params\">(PasswordAttempt)</span> -&gt;</span>\n    StoredPassword = erlang:binary_to_list(Password),\n    user_lib:compare_password(PasswordAttempt, StoredPassword).\n\n<span class=\"hljs-function\"><span class=\"hljs-title\">set_login_cookies</span><span class=\"hljs-params\">()</span> -&gt;</span>\n    [ mochiweb_cookies:cookie(<span class=\"hljs-string\">\"user_id\"</span>, erlang:md5(Id), [{path, <span class=\"hljs-string\">\"/\"</span>}]),\n      mochiweb_cookies:cookie(<span class=\"hljs-string\">\"session_id\"</span>, session_identifier(), [{path, <span class=\"hljs-string\">\"/\"</span>}]) ].\n</code></pre>\n<p>Set an actual secret for your <code>SETEC_ASTRONOMY</code> like I will be.</p>\n<p>This model contains one of the items I want to improve upon in the future. Eventually, the session storage will be moved over to <a href=\"http://basho.com/riak/\">Riak</a> as its bitcask storage backend supports automatic expiry of keys, so I don&#39;t have to worry about invalidating old sessions as they expire. Chalk that up as being a lazy (smart) programmer.</p>\n<h2 id=\"a-helper-module\">A Helper Module</h2>\n<p>This helper module isn&#39;t really necessary, but it does provide a simple place to keep functions that don&#39;t really belong in our model. In fact, I see some refactoring that is in order to clean up the model and controllers even further.</p>\n<pre><code class=\"hljs language-erlang\"><span class=\"hljs-comment\">%% file: src/lib/user_lib.erl</span>\n<span class=\"hljs-keyword\">-module</span><span class=\"hljs-params\">(user_lib)</span>.\n<span class=\"hljs-keyword\">-compile</span><span class=\"hljs-params\">(export_all)</span>.\n\n<span class=\"hljs-comment\">%% On success, returns {ok, Hash}.</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">hash_password</span><span class=\"hljs-params\">(Password)</span>-&gt;</span>\n    {ok, Salt} = bcrypt:gen_salt(),\n    bcrypt:hashpw(Password, Salt).\n\n<span class=\"hljs-comment\">%% Tests for presence and validity of session.</span>\n<span class=\"hljs-comment\">%% Forces login on failure.</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">require_login</span><span class=\"hljs-params\">(Req)</span> -&gt;</span>\n    <span class=\"hljs-keyword\">case</span> Req:cookie(<span class=\"hljs-string\">\"user_id\"</span>) <span class=\"hljs-keyword\">of</span>\n        undefined -&gt; {redirect, <span class=\"hljs-string\">\"/user/login\"</span>};\n        Id -&gt;\n            <span class=\"hljs-keyword\">case</span> boss_db:find(Id) <span class=\"hljs-keyword\">of</span>\n                undefined -&gt; {redirect, <span class=\"hljs-string\">\"/user/login\"</span>};\n                TestUser -&gt;\n                    <span class=\"hljs-keyword\">case</span> TestUser:session_identifier() =:= Req:cookie(<span class=\"hljs-string\">\"session_id\"</span>) <span class=\"hljs-keyword\">of</span>\n                        <span class=\"hljs-literal\">false</span> -&gt; {redirect, <span class=\"hljs-string\">\"/user/login\"</span>};\n                        <span class=\"hljs-literal\">true</span> -&gt; {ok, TestUser}\n                    <span class=\"hljs-keyword\">end</span>\n            <span class=\"hljs-keyword\">end</span>\n     <span class=\"hljs-keyword\">end</span>.\n\n<span class=\"hljs-function\"><span class=\"hljs-title\">compare_password</span><span class=\"hljs-params\">(PasswordAttempt, Password)</span> -&gt;</span>\n    {ok, Password} =:= bcrypt:hashpw(PasswordAttempt, Password).\n</code></pre>\n<p><code>user_lib:require_login/1</code> checks for the presence of session data and validates it, redirecting the request to our login page. If everything is good to go, it returns our <code>TestUser</code>.</p>\n<h2 id=\"our-user-controller\">Our User Controller</h2>\n<p>This allows our users to register for an account or login. It might be nice to let the logout in the future.</p>\n<pre><code class=\"hljs language-erlang\"><span class=\"hljs-comment\">%% file: src/controller/test_user_controller.erl</span>\n<span class=\"hljs-keyword\">-module</span><span class=\"hljs-params\">(test_user_controller, [Req])</span>.\n<span class=\"hljs-keyword\">-compile</span><span class=\"hljs-params\">(export_all)</span>.\n\n<span class=\"hljs-function\"><span class=\"hljs-title\">login</span><span class=\"hljs-params\">('GET', [])</span> -&gt;</span>\n    {ok, [{redirect, Req:header(referer)}]};\n\n<span class=\"hljs-function\"><span class=\"hljs-title\">login</span><span class=\"hljs-params\">('POST', [])</span> -&gt;</span>\n    Username = Req:post_param(<span class=\"hljs-string\">\"username\"</span>),\n    <span class=\"hljs-keyword\">case</span> boss_db:find(annie_user, [{username, Username}], [{limit, <span class=\"hljs-number\">1</span>}]) <span class=\"hljs-keyword\">of</span>\n        [TestUser] -&gt;\n            <span class=\"hljs-keyword\">case</span> TestUser:check_password(Req:post_param(<span class=\"hljs-string\">\"password\"</span>)) <span class=\"hljs-keyword\">of</span>\n                <span class=\"hljs-literal\">true</span> -&gt;\n                   {redirect, proplists:get_value(<span class=\"hljs-string\">\"redirect\"</span>,\n                       Req:post_params(), <span class=\"hljs-string\">\"/\"</span>), TestUser:set_login_cookies()};\n                <span class=\"hljs-literal\">false</span> -&gt;\n                    {ok, [{error, <span class=\"hljs-string\">\"Password mismatch\"</span>}]}\n            <span class=\"hljs-keyword\">end</span>;\n        [] -&gt;\n            {ok, [{error, <span class=\"hljs-string\">\"User not found\"</span>}]}\n    <span class=\"hljs-keyword\">end</span>.\n\n<span class=\"hljs-function\"><span class=\"hljs-title\">register</span><span class=\"hljs-params\">('GET', [])</span> -&gt;</span>\n    {ok, []};\n\n<span class=\"hljs-function\"><span class=\"hljs-title\">register</span><span class=\"hljs-params\">('POST', [])</span> -&gt;</span>\n    Email = Req:post_param(<span class=\"hljs-string\">\"email\"</span>),\n    Username = Req:post_param(<span class=\"hljs-string\">\"username\"</span>),\n    {ok, Password} = user_lib:hash_password(Req:post_param(<span class=\"hljs-string\">\"password\"</span>)),\n    TestUser = test_user:new(id, Email, Username, Password),\n    Result = TestUser:save(),\n    {ok, [Result]}.\n</code></pre>\n<h2 id=\"example-authenticated-controller\">Example Authenticated Controller</h2>\n<p>In cases where we want an entire controller to require authentication, let&#39;s have ChicagoBoss make our lives a little bit easier:</p>\n<pre><code class=\"hljs language-erlang\"><span class=\"hljs-comment\">%% file: src/controller/test_index_controller.erl</span>\n<span class=\"hljs-keyword\">-module</span><span class=\"hljs-params\">(test_index_controller, [Req])</span>.\n<span class=\"hljs-keyword\">-compile</span><span class=\"hljs-params\">(export_all)</span>.\n\n<span class=\"hljs-comment\">%% Forces login if valid session is not present.</span>\n<span class=\"hljs-comment\">%% Called before all actions.</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">before_</span><span class=\"hljs-params\">(_)</span> -&gt;</span>\n    user_lib:require_login(Req).\n\n<span class=\"hljs-comment\">%%</span>\n<span class=\"hljs-comment\">%% Index</span>\n<span class=\"hljs-comment\">%%</span>\n<span class=\"hljs-comment\">%% requires TestUser</span>\n<span class=\"hljs-comment\">%%</span>\n<span class=\"hljs-comment\">%% GET index/index</span>\n<span class=\"hljs-comment\">%%</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">index</span><span class=\"hljs-params\">('GET', [], TestUser)</span> -&gt;</span>\n    {ok, [{test_user, TestUser}]}.\n</code></pre>\n<p><code>before_/1</code> is doing most of the legwork here. It&#39;s called before any of our actions, calling <code>user_lib:require_login</code> in the process. Note, we can have <code>before_</code> pass our <code>TestUser</code> to our actions by adding <code>TestUser</code> as a third parameter to our <code>index</code> function. This isn&#39;t necessary, but if you want to pass the model along to you views, this would be the place to do it.</p>\n<h2 id=\"wrapping-up\">Wrapping Up</h2>\n<p>Now you can start securing your ChicagoBoss applications and not have to use <code>MD5</code> hashes (whoo!). I went through quite a few iterations in getting this to actually run without problems, more than likely due to my lack of experience with Erlang, so drop me a note if you run into any issues.</p>\n"}