{"file":"posts/2017-01-21-asp-dotnet-core-webapi-in-azure-app-service.md","type":"posts","slug":"posts/asp-dotnet-core-webapi-in-azure-app-service","date":"2017-01-21T00:12:50.000Z","title":"ASP.NET Core WebAPI in Azure App Service","tags":[".net","csharp","azure"],"author":"shane","categories":["All Posts","Programming","Devops"],"description":"In my opinion, Azure App Services are an easy and direct way to launch your ASP.NET Core application for the outside world to access. Azure App Service offers a free tier, perfect for tinkering or getting a new project off the ground.","modified":"2017-02-03T00:00:00.000Z","content":"<p>In my opinion, Azure App Services are an easy and direct way to launch your ASP.NET Core application for the outside world to access. Azure App Service offers a free tier, perfect for tinkering or getting a new project off the ground.</p>\n<h2 id=\"prepare-the-application\">Prepare the Application</h2>\n<p>While you can always use an existing .NET Core project, generating a new project is always an option and one we are going to take today. Without going too far into this process, we need to have a .NET Core project and add that project to a local Git repository.</p>\n<blockquote>\n<p>First comes the code:</p>\n</blockquote>\n<pre><code>$ yo aspnet\n$ cd ProjectName\n$ dotnet restore\n$ dotnet build\n</code></pre><blockquote>\n<p>Then comes the commit:</p>\n</blockquote>\n<pre><code>$ git init\n$ git commit -am &quot;Initial commit&quot;\n</code></pre><h2 id=\"create-app-service\">Create App Service</h2>\n<p>Adding a new App Service resource to your Azure account is fairly straightforward with Azure&#39;s portal, adding a &quot;Web App&quot; under &quot;Web + Mobile&quot; in the new resource pane.</p>\n<p>{% img w-100 /assets/images/asp-dotnet-core-webapi-in-azure-app-service/create-new-resource.png %}</p>\n<p>When going through the initial setup, you&#39;ll be prompted for a few pieces of information:</p>\n<ul>\n<li>App name</li>\n<li>Subscription</li>\n<li>Resource Group</li>\n<li>App Service plan/Location</li>\n</ul>\n<p>Once finalized, you&#39;ll be able to click the &quot;Create&quot; button. You&#39;ll notice a notification near the upper right-hand of the portal stating your deployment has started. Wait for your notification that the deployment was succesful, and find your App Service resource, either under &quot;All Resources&quot; or on your dashboard if you elected to pin it there. Most of what we&#39;ll do from here will stem from the resource pane that appears once you click your App Service resource.</p>\n<p>If you haven&#39;t set up a deployment user/password on your Azure account before, Goto App Deployment &gt; Deployment Credentials</p>\n<p>{% img w-100 w-50-l /assets/images/asp-dotnet-core-webapi-in-azure-app-service/app-deployment.png %}</p>\n<p>which will require you enter the following:</p>\n<ul>\n<li>FTP/deployment username</li>\n<li>Password</li>\n<li>Confirm password</li>\n</ul>\n<p>The username/password combination you&#39;re configuring will allow you to use their FTP service and Git through HTTPS.</p>\n<h2 id=\"local-git-deployment\">Local Git deployment</h2>\n<p>By default, Azure App Service resources use FTP for deployment, meaning we need to manually connect via FTP and upload a built version of our application. Git deployment simplifies this by allowing us to push our raw source code to Azure and have the build + deployment processes occur automatically. To get Git deployment enabled on our App Service, we&#39;ll need to go to App Deployment &gt; Deployment Options, select &quot;Local Git Repository&quot; for the source and confirm by clicking &quot;Ok&quot;.</p>\n<ul>\n<li>Choose Source -&gt; Local Git Repository</li>\n<li>Ok</li>\n</ul>\n<p>Under Settings &gt; Properties, copy the Git URL for your resource. We&#39;ll use this as the remote for our local Git repository, pushing our current master branch to Azure:</p>\n<pre><code>$ git remote add azure https://slogsdon@slogsdon-projectname.scm.azurewebsites.net:443/slogsdon-projectname.git\n$ git push azure master\nPassword for 'https://slogsdon@slogsdon-projectname.scm.azurewebsites.net:443':\nCounting objects: 14, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (12/12), done.\nWriting objects: 100% (14/14), 6.07 KiB | 0 bytes/s, done.\nTotal 14 (delta 0), reused 0 (delta 0)\nremote: Updating branch 'master'.\nremote: Updating submodules.\nremote: Preparing deployment for commit id '660e32f957'.\nremote: Generating deployment script.\nremote: Project file path: .\\project.json\nremote: Generated deployment script files\nremote: Running deployment command...\nremote: Handling ASP.NET Core Web Application deployment.\nremote: Restoring packages for D:\\home\\site\\repository\\project.json...\nremote:   GET https://api.nuget.org/v3-flatcontainer/microsoft.netcore.app/index.json\nremote:   GET https://api.nuget.org/v3-flatcontainer/microsoft.aspnetcore.mvc/index.json\n# ... package restore\nremote: ....................\nremote: Committing restore...\nremote: Writing lock file to disk. Path: D:\\home\\site\\repository\\project.lock.json\nremote: D:\\home\\site\\repository\\project.json\nremote: Restore completed in 151105ms.\nremote:\nremote: NuGet Config files used:\nremote:     C:\\DWASFiles\\Sites\\#1slogsdon-projectname\\AppData\\NuGet\\NuGet.Config\nremote:\nremote: Feeds used:\nremote:     https://api.nuget.org/v3/index.json\nremote:\nremote: Installed:\nremote:     259 package(s) to D:\\home\\site\\repository\\project.json\nremote: Microsoft (R) Build Engine version 15.1.0.0\nremote: Copyright (C) Microsoft Corporation. All rights reserved.\nremote:\nremote: Build started 1/1/2017 5:50:46 PM.\nremote: Project \"D:\\home\\site\\repository\\project.json\" on node 1 (Publish target(s)).\nremote: MSBUILD : error MSB4025: The project file could not be loaded. Data at the root level is invalid. Line 1, position 1. [D:\\home\\site\\repository\\project.json]\nremote: Done Building Project \"D:\\home\\site\\repository\\project.json\" (Publish target(s)) -- FAILED.\nremote:\nremote: Build FAILED.\nremote:\nremote: \"D:\\home\\site\\repository\\project.json\" (Publish target) (1) -&gt;\nremote:   MSBUILD : error MSB4025: The project file could not be loaded. Data at the root level is invalid. Line 1, position 1. [D:\\home\\site\\repository\\project.json]\nremote:\nremote:     0 Warning(s)\nremote:     1 Error(s)\nremote:\nremote: Time Elapsed 00:00:00.20\nremote: Failed exitCode=1, command=dotnet publish \"project.json\" --output \"D:\\local\\Temp\\8d4326e571d5047\" --configuration Release\nremote: An error has occurred during web site deployment.\nremote:\nremote: Error - Changes committed to remote repository but deployment to website failed.\nTo https://slogsdon-projectname.scm.azurewebsites.net:443/slogsdon-projectname.git\n * [new branch]      master -&gt; master\n</code></pre><p>Awesome. Kudu (Azure&#39;s Git deployment engine) is detecting the project is .NET Core, but it&#39;s using MSBuild to build the project. MSBuild apparently isn&#39;t compatible with <code>project.json</code>. Now what?</p>\n<blockquote>\n<p>Two weeks later</p>\n</blockquote>\n<p>After taking a break, I decided to use my brain and found this <a href=\"http://stackoverflow.com/a/40658723/771757\">StackOverflow answer</a> which was the key to correcting the <code>MSB4025</code> issue. The fix is to add a <code>global.json</code> file to your project with a specification with the specific version of the SDK being used locally.</p>\n<p>If generating a project with <code>dotnet new</code> or <code>yo aspnet</code>, you&#39;ll need to move your project around as well to accomodate the <code>global.json</code> file&#39;s way of specifying projects:</p>\n<pre><code>$ cd ProjectName/..\n$ mkdir src\n$ mv ProjectName src\n$ touch global.json\n$ tree -L 2\n.\n├── global.json\n└── src\n    └── ProjectName\n\n2 directories, 1 file\n</code></pre><p>Big take away is that your existing files need to move into a directory under <code>src</code> (or whatever you choose to name it). From there, we need to add some content to <code>global.json</code>:</p>\n<pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">\"projects\"</span>: [ <span class=\"hljs-string\">\"src\"</span> ],\n  <span class=\"hljs-attr\">\"sdk\"</span>: { <span class=\"hljs-attr\">\"version\"</span>: <span class=\"hljs-string\">\"1.0.0-preview2-1-003177\"</span> }\n}\n</code></pre>\n<p><em>Update 03 February 2017</em>: Moving your project files to <code>src</code> does not seem to be a hard requirement. Dan Clarke pointed this out to me <a href=\"https://twitter.com/dracan/status/827406653754531840\">via Twitter</a>, stating the following <code>global.json</code> file should work as well:</p>\n<pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">\"projects\"</span>: [ <span class=\"hljs-string\">\".\"</span> ],\n  <span class=\"hljs-attr\">\"sdk\"</span>: { <span class=\"hljs-attr\">\"version\"</span>: <span class=\"hljs-string\">\"1.0.0-preview2-1-003177\"</span> }\n}\n</code></pre>\n<p>This would have the benefit of not requiring a change in project structure, but if you like to keep your source and test projects separate (I do), you can keep your main project in <code>src</code> and a test project in <code>test</code>, ensuring that <code>test</code> was added to the <code>projects</code> array in the <code>global.json</code> file. Either way should get the job done at the end of the day, so be sure to pick what makes most sense to you and your project.</p>\n<p>If, like me, you have no idea which SDK your locally installed <code>dotnet</code> is using, running <code>dotnet --version</code> will give the exact string needed under <code>sdk.version</code> in your config. Once set up, you can commit all of those changes and push them up to your app, eventually seeing the below:</p>\n<pre><code>remote: ................................................\nremote: Configuring the following project for use with IIS: 'D:\\local\\Temp\\8d441b07923e5d0'\nremote: Updating web.config at 'D:\\local\\Temp\\8d441b07923e5d0\\web.config'\nremote: Configuring project completed successfully\nremote: publish: Published to D:\\local\\Temp\\8d441b07923e5d0\nremote: Published 1/1 projects successfully\nremote: KuduSync.NET from: 'D:\\local\\Temp\\8d441b07923e5d0' to: 'D:\\home\\site\\wwwroot'\nremote: Deleting file: 'hostingstart.html'\nremote: Copying file: 'appsettings.json'\nremote: Copying file: 'Microsoft.AspNetCore.Antiforgery.dll'\nremote: Copying file: 'Microsoft.AspNetCore.Authentication.Cookies.dll'\nremote: Copying file: 'Microsoft.AspNetCore.Authentication.dll'\nremote: Copying file: 'Microsoft.AspNetCore.Authorization.dll'\nremote: Copying file: 'Microsoft.AspNetCore.Cors.dll'\nremote: Copying file: 'Microsoft.AspNetCore.Cryptography.Internal.dll'\nremote: Copying file: 'Microsoft.AspNetCore.Cryptography.KeyDerivation.dll'\nremote: Copying file: 'Microsoft.AspNetCore.DataProtection.Abstractions.dll'\nremote: Copying file: 'Microsoft.AspNetCore.DataProtection.dll'\nremote: Copying file: 'Microsoft.AspNetCore.Diagnostics.Abstractions.dll'\nremote: Copying file: 'Microsoft.AspNetCore.Diagnostics.dll'\nremote: Copying file: 'Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore.dll'\nremote: Copying file: 'Microsoft.AspNetCore.Hosting.Abstractions.dll'\nremote: Copying file: 'Microsoft.AspNetCore.Hosting.dll'\nremote: Copying file: 'Microsoft.AspNetCore.Hosting.Server.Abstractions.dll'\nremote: Copying file: 'Microsoft.AspNetCore.Html.Abstractions.dll'\nremote: Copying file: 'Microsoft.AspNetCore.Http.Abstractions.dll'\nremote: Copying file: 'Microsoft.AspNetCore.Http.dll'\nremote: Copying file: 'Microsoft.AspNetCore.Http.Extensions.dll'\nremote: Copying file: 'Microsoft.AspNetCore.Http.Features.dll'\nremote: Copying file: 'Microsoft.AspNetCore.HttpOverrides.dll'\nremote: Copying file: 'Microsoft.AspNetCore.Identity.dll'\nremote: Copying file: 'Microsoft.AspNetCore.Identity.EntityFrameworkCore.dll'\nremote: Copying file: 'Microsoft.AspNetCore.JsonPatch.dll'\nremote: Copying file: 'Microsoft.AspNetCore.Localization.dll'\nremote: Copying file: 'Microsoft.AspNetCore.Mvc.Abstractions.dll'\nremote: Copying file: 'Microsoft.AspNetCore.Mvc.ApiExplorer.dll'\nremote: Copying file: 'Microsoft.AspNetCore.Mvc.Core.dll'\nremote: Copying file: 'Microsoft.AspNetCore.Mvc.Cors.dll'\nremote: Copying file: 'Microsoft.AspNetCore.Mvc.DataAnnotations.dll'\nremote: Copying file: 'Microsoft.AspNetCore.Mvc.dll'\nremote: Copying file: 'Microsoft.AspNetCore.Mvc.Formatters.Json.dll'\nremote: Copying file: 'Microsoft.AspNetCore.Mvc.Localization.dll'\nremote: Copying file: 'Microsoft.AspNetCore.Mvc.Razor.dll'\nremote: Copying file: 'Microsoft.AspNetCore.Mvc.Razor.Host.dll'\nremote: Copying file: 'Microsoft.AspNetCore.Mvc.TagHelpers.dll'\nremote: Copying file: 'Microsoft.AspNetCore.Mvc.ViewFeatures.dll'\nremote: Copying file: 'Microsoft.AspNetCore.Razor.dll'\nremote: Copying file: 'Microsoft.AspNetCore.Razor.Runtime.dll'\nremote: Copying file: 'Microsoft.AspNetCore.Routing.Abstractions.dll'\nremote: Copying file: 'Microsoft.AspNetCore.Routing.dll'\nremote: Copying file: 'Microsoft.AspNetCore.Server.IISIntegration.dll'\nremote: Copying file: 'Microsoft.AspNetCore.Server.Kestrel.dll'\nremote: Copying file: 'Microsoft.AspNetCore.StaticFiles.dll'\nremote: Copying file: 'Microsoft.AspNetCore.WebUtilities.dll'\nremote: Copying file: 'Microsoft.Data.Sqlite.dll'\nremote: Copying file: 'Microsoft.DotNet.InternalAbstractions.dll'\nremote: Omitting next output lines...\nremote: ...\nremote: Finished successfully.\nremote: Running post deployment command(s)...\nremote: Deployment successful.\nTo https://slogsdon-projectname.scm.azurewebsites.net:443/slogsdon-projectname.git\n   d26cae1..3b90ee9  master -&gt; master\n</code></pre><h2 id=\"reap-benefits\">Reap benefits</h2>\n<p>Once in Azure, your application becomes accessible to all with the URL:</p>\n<pre><code>$ curl -I http://slogsdon-projectname.azurewebsites.net\nHTTP/1.1 200 OK\nContent-Length: 0\nContent-Type: text/html; charset=utf-8\nServer: Microsoft-IIS/8.0\nX-Powered-By: ASP.NET\nSet-Cookie: ARRAffinity=95a49b67d4a8988dc9af99afd3e5e3d0f060d6764e52202b8294a0e6c7c97d6a;Path=/;Domain=slogsdon-projectname.azurewebsites.net\nDate: Sat, 21 Jan 2017 04:16:05 GMT\n</code></pre><p>{% img w-100 /assets/images/asp-dotnet-core-webapi-in-azure-app-service/visit-project.png %}</p>\n<p>And don&#39;t forget about some of the benefits of using Azure (subscription and configuration allowing):</p>\n<ul>\n<li>Managed SQL Server</li>\n<li>CI/CD through VSTS</li>\n<li>Automatic scaling</li>\n<li>Application Insights</li>\n<li>etc.</li>\n</ul>\n<p>So iterate on your project, incorporating Azure features when you see fit. Your release process can now be a simple <code>git push</code> away thanks to Azure App Service!</p>\n"}